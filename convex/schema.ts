// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

/**
 * Production-ready Convex schema for Gitstack.
 *
 * Tables:
 * - users: registered users (indexed by Clerk ID)
 * - cliAuthRequests: ephemeral CLI auth handshake records indexed by cliAuthToken
 * - snapshots: snapshot metadata per user (one row per snapshot)
 * - snapshotFiles: per-file metadata and hashes for a snapshot (separate table to avoid very large docs)
 *
 * Notes:
 * - Timestamps are stored as numbers (ms since epoch).
 * - Many fields are optional so the server can patch documents incrementally.
 */

export default defineSchema({
  users: defineTable({
  clerkUserId: v.string(),
  email: v.string(),
  name: v.string(),
  createdAt: v.number(),
}).index("by_clerkUserId", ["clerkUserId"]),


  // CLI authentication handshake
  // - created with status 'pending'
  // - updated to 'completed' with clerk/convex ids when web flow finishes
  cliAuthRequests: defineTable({
    cliAuthToken: v.string(), // token generated by CLI, used as lookup key
    status: v.union(v.literal("pending"), v.literal("completed"), v.literal("failed")),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
    // Optional auth payload set when completed
    clerkSessionToken: v.optional(v.string()),
    clerkUserId: v.optional(v.string()),
    convexUserId: v.optional(v.string()),
  }).index("by_cliAuthToken", ["cliAuthToken"]),

  // Snapshot metadata (one row per snapshot)
  snapshots: defineTable({
    userId: v.string(), // convex user id who owns this snapshot
    title: v.optional(v.string()), // human-friendly label
    timestamp: v.number(), // ms epoch when snapshot was taken
    fileCount: v.number(), // number of files in this snapshot
    // optional summary / description
    description: v.optional(v.string()),
    // optional reference to pushed snapshot id (if pushed to remote web)
    externalId: v.optional(v.string()),
  }).index("by_user_id", ["userId"]),

  // Per-file metadata for snapshots (keeps snapshot doc small)
  snapshotFiles: defineTable({
    snapshotId: v.string(), // _id of snapshots table
    path: v.string(), // file path at snapshot time
    hash: v.optional(v.string()), // SHA256 hex or null if not calculated
    size: v.optional(v.number()), // file size in bytes
    mode: v.optional(v.number()), // optional unix mode
    // Additional metadata can be added later (mime type, compressed flag, etc.)
  }).index("by_snapshot_id", ["snapshotId"]),
});