// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

/**
 * Production-ready Convex schema for Gitstack.
 *
 * Tables:
 * - users: registered users (indexed by Clerk ID)
 * - cliAuthRequests: ephemeral CLI auth handshake records indexed by cliAuthToken
 * - projects: user's projects, containing snapshots, deployments, etc.
 * - snapshots: snapshot metadata per project (one row per snapshot)
 * - snapshotFiles: per-file metadata and hashes for a snapshot (separate table to avoid very large docs)
 *
 * Notes:
 * - Timestamps are stored as numbers (ms since epoch).
 * - Many fields are optional so the server can patch documents incrementally.
 */

export default defineSchema({
  users: defineTable({
    clerkUserId: v.string(),
    email: v.string(),
    name: v.optional(v.string()),
    createdAt: v.number(),
    lastLoginAt: v.optional(v.float64())
  }).index("by_clerkUserId", ["clerkUserId"]),

  // CLI authentication handshake
  cliAuthRequests: defineTable({
    cliAuthToken: v.string(), // token generated by CLI, used as lookup key
    status: v.union(v.literal("pending"), v.literal("completed"), v.literal("failed")),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
    clerkSessionToken: v.optional(v.string()),
    clerkUserId: v.optional(v.string()),
    convexUserId: v.optional(v.string()), // This should actually be v.optional(v.id("users")) for type safety
  }).index("by_cliAuthToken", ["cliAuthToken"]),

  // NEW: Projects table, the core entry point for all project-related data
  projects: defineTable({
    name: v.string(),
    description: v.optional(v.string()),
    visibility: v.union(v.literal("public"), v.literal("private")),
    createdAt: v.number(),
    updatedAt: v.number(),
    ownerId: v.id("users"), // Link to the user who owns the project
    // Denormalized stats for quick display without extra queries
    stats: v.optional(
      v.object({
        snapshots: v.number(),
        deployments: v.number(),
        lastDeployed: v.optional(v.number()), // Renamed from last_deployed to lastDeployed for consistency
      })
    ),
  })
    .index("by_ownerId", ["ownerId"]) // Index to query projects by owner
    .searchIndex("by_name", { // Optional: A search index for project names
      searchField: "name",
      filterFields: ["ownerId", "visibility"],
    }),

  // Snapshot metadata (one row per snapshot)
  // Now linked to a project
  snapshots: defineTable({
    projectId: v.id("projects"), // Link to the project this snapshot belongs to
    userId: v.id("users"), // convex user id who owns this snapshot
    title: v.optional(v.string()),
    timestamp: v.number(),
    fileCount: v.number(),
    description: v.optional(v.string()),
    externalId: v.optional(v.string()),
  })
    .index("by_project_id", ["projectId"]) // New index to query snapshots by project
    .index("by_user_id", ["userId"]), // Still useful for user-centric views

  // Per-file metadata for snapshots (keeps snapshot doc small)
  // Now linked to a project's snapshot
  snapshotFiles: defineTable({
    snapshotId: v.id("snapshots"), // _id of snapshots table
    path: v.string(),
    hash: v.optional(v.string()),
    size: v.optional(v.number()),
    mode: v.optional(v.number()),
  }).index("by_snapshot_id", ["snapshotId"]),
});